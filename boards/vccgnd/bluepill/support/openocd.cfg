

if {[info exists env(OPENOCD_INTERFACE)]} {
	set INTERFACE $env(OPENOCD_INTERFACE)
	echo "Conf : INTERFACE -- $env(OPENOCD_INTERFACE)"
} else {
	if { [info exists OPENOCD_INTERFACE] } {
		set INTERFACE $OPENOCD_INTERFACE
		echo "Conf : INTERFACE -- $OPENOCD_INTERFACE"
	} else {
		set INTERFACE "cmsis-dap"
	}
}

if {[info exists env(OPENOCD_TRANSPORT)]} {
	set TRANSPORT $env(OPENOCD_TRANSPORT)
	echo "Conf : TRANSPORT -- $env(OPENOCD_TRANSPORT)"
} else {
	if { [info exists OPENOCD_TRANSPORT] } {
		set TRANSPORT $OPENOCD_TRANSPORT
		echo "Conf : TRANSPORT -- $OPENOCD_TRANSPORT"
	} else {
		set TRANSPORT "swd"
	}
}

if {[info exists env(OPENOCD_TARGET)]} {
	set TARGET $env(OPENOCD_TARGET)
	echo "Conf : TARGET -- $env(OPENOCD_TARGET)"
} else {
	if { [info exists OPENOCD_TARGET] } {
		set TARGET $OPENOCD_TARGET
		echo "Conf : TARGET    -- $OPENOCD_TARGET"
	} else {
		set TARGET "stm32f1x"
	}
}

source [find interface/$INTERFACE.cfg]

transport select $TRANSPORT

source [find target/$TARGET.cfg]

# Dont use hardware reset line (even if available) and use SWD
# "software" reset only (srst_only and srst_nogate).
reset_config srst_only srst_nogate connect_deassert_srst

# Reset the peripherals and the core
cortex_m reset_config sysresetreq

$_TARGETNAME configure -event gdb-attach {
	echo "Debugger attaching: halting execution"
	reset halt
	gdb_breakpoint_override hard
}

$_TARGETNAME configure -event gdb-detach {
	echo "Debugger detaching: resuming execution"
	resume
}

# Due to the use of connect_assert_srst, running gdb requires
# to reset halt just after openocd init.
rename init old_init
proc init {} {
	old_init
	reset halt
}
